// Generated by APIGenerator 1.0
// DO NOT EDIT!!!

#include "clientsyncmanager.h"

void ClientSyncManager::syncUpdate(Update* u, UpdatesState* clientstate) 
{
    switch(u->constructorId()) {
    case TLTypes::UpdateNewMessage:
    case TLTypes::UpdateDeleteMessages:
    case TLTypes::UpdateReadHistoryInbox:
    case TLTypes::UpdateReadHistoryOutbox:
    case TLTypes::UpdateWebPage:
    case TLTypes::UpdateReadMessagesContents:
    case TLTypes::UpdateChannelTooLong:
    case TLTypes::UpdateEditMessage:
        ClientSyncManager::syncPts(u->pts(), clientstate);
        break;
    case TLTypes::UpdateUserPhoto:
    case TLTypes::UpdateContactRegistered:
    case TLTypes::UpdateNewAuthorization:
    case TLTypes::UpdateEncryption:
    case TLTypes::UpdateEncryptedMessagesRead:
    case TLTypes::UpdateChatParticipantAdd:
        ClientSyncManager::syncDate(u->date(), clientstate);
        break;
    case TLTypes::UpdateNewChannelMessage:
        ClientSyncManager::syncPts(u->pts(), TelegramCache_dialog(u->messageUpdatenewchannelmessage()->toId()->channelId()));
        break;
    case TLTypes::UpdateEditChannelMessage:
        ClientSyncManager::syncPts(u->pts(), TelegramCache_dialog(u->message()->toId()->channelId()));
        break;
    case TLTypes::UpdateDeleteChannelMessages:
        ClientSyncManager::syncPts(u->pts(), TelegramCache_dialog(u->channelId()));
        break;
    default:
        break;
    }
}

void ClientSyncManager::syncUpdates(Updates* u, UpdatesState* clientstate) 
{
	if(u->constructorId() == TLTypes::UpdateShortMessage)
	{
		ClientSyncManager::syncPts(u->pts(), clientstate);
		ClientSyncManager::syncDate(u->date(), clientstate);
	}
	else if(u->constructorId() == TLTypes::UpdateShortChatMessage)
	{
		ClientSyncManager::syncPts(u->pts(), clientstate);
		ClientSyncManager::syncDate(u->date(), clientstate);
	}
	else if(u->constructorId() == TLTypes::UpdateShort)
		ClientSyncManager::syncDate(u->date(), clientstate);
	else if(u->constructorId() == TLTypes::UpdatesCombined)
	{
		ClientSyncManager::syncDate(u->date(), clientstate);
		ClientSyncManager::syncSeq(u->seq(), clientstate);
	}
	else if(u->constructorId() == TLTypes::Updates)
	{
		ClientSyncManager::syncDate(u->date(), clientstate);
		ClientSyncManager::syncSeq(u->seq(), clientstate);
	}
	else if(u->constructorId() == TLTypes::UpdateShortSentMessage)
	{
		ClientSyncManager::syncPts(u->pts(), clientstate);
		ClientSyncManager::syncDate(u->date(), clientstate);
	}
}

void ClientSyncManager::syncState(UpdatesState* serverstate) 
{
	UpdatesState* clientstate = TelegramConfig_clientState;

	ClientSyncManager::syncPts(serverstate->pts(), clientstate);
	ClientSyncManager::syncQts(serverstate->qts(), clientstate);
	ClientSyncManager::syncDate(serverstate->date(), clientstate);
	ClientSyncManager::syncSeq(serverstate->seq(), clientstate);
	ClientSyncManager::syncUnreadCount(serverstate->unreadCount(), clientstate);
}

void ClientSyncManager::syncPts(TLInt pts, UpdatesState* clientstate) 
{
	if(pts <= clientstate->pts())
		return;
	
	clientstate->setPts(pts);
}

void ClientSyncManager::syncPts(TLInt pts, Dialog *dialog)
{
	if(pts <= dialog->pts())
		return;

	dialog->setPts(pts);
}

void ClientSyncManager::syncQts(TLInt qts, UpdatesState* clientstate) 
{
	if(qts <= clientstate->qts())
		return;
	
	clientstate->setQts(qts);
}

void ClientSyncManager::syncDate(TLInt date, UpdatesState* clientstate) 
{
	if(date <= clientstate->date())
		return;
	
	clientstate->setDate(date);
}

void ClientSyncManager::syncSeq(TLInt seq, UpdatesState* clientstate) 
{
	clientstate->setSeq(seq); // NOTE: How to handle 'seq'?
}

void ClientSyncManager::syncUnreadCount(TLInt unreadcount, UpdatesState* clientstate) 
{
	if(unreadcount <= clientstate->unreadCount())
		return;
	
	clientstate->setUnreadCount(unreadcount);
}

